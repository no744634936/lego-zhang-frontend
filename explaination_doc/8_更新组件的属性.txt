
// 组件的适配
ant design vue 里面

有些组件事靠 :value 来显示值的比如<a-input>
<a-input v-model:value="value" placeholder="Basic usage" />

有些组件它显示的值的时候并不是靠 :value 来显示的
比如下面这个就是靠 :count

  <a-badge :count="99">
    <a href="#" class="head-example" />
  </a-badge>
  <a-badge :count="100">
    <a href="#" class="head-example" />
  </a-badge>


所以要在 mapPropsToForm.ts 与 PropsTable.vue 文件中做一些适配 添加 valueProp

//  :[value.valueProp]  可以变为 :value 或者 :count 之类的



//  PropsTable.vue 文件里面做一个这个样子的item

{
    text:{
        component:'a-input',
        value:'hello',
        valueProp:'value', 
        eventName:'change',
        eventAction: {'change': (e: any)=>{context.emit("changeValue",{key,value:e})}}
        },
    ...
}

或者类似于这个样子的item,伪代码仅作示例

{
    badge:{
        component:'a-badge',
        value:'99',
        valueProp:'count',
        eventName:'click',
        eventAction: {'click': (e: any)=>{context.emit("changeValue",{key,value:e})}}
    },
    ...
}




编辑表单中的值，在值更新的同时将数据更新至页面

首先数据从store里被取出来，放进组件里面，被显示在editor.vue 页面，
然后组件被点击就按顺序执行  onItemClick-->setElementActive-->setElementActive 方法
更新store (currentElement被赋值)，组件被选中，
store里的数据内容发生变化，那么editor.vue 页面与store相关的响应式对象就自动发生变化，
把变化的组件属性交给右侧PropsTable.vue组件，渲染成表单

PropsTable.vue 文件里使用 v-on="value.eventAction" 将数据发送给Editor.vue

Editor.vue 用 handleChangeValue 方法接收到传过来的数据然后更新store里面的数据

store里的数据内容发生变化，那么editor.vue 页面与store相关的响应式对象就自动发生变化，

